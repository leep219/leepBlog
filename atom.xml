<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Leep Blog]]></title>
  <link href="http://leep219.github.com/leepBlog/atom.xml" rel="self"/>
  <link href="http://leep219.github.com/leepBlog/"/>
  <updated>2013-03-10T00:51:54+08:00</updated>
  <id>http://leep219.github.com/leepBlog/</id>
  <author>
    <name><![CDATA[Leep]]></name>
    <email><![CDATA[leep219@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[第一本英文原版——JAVA thread programming]]></title>
    <link href="http://leep219.github.com/leepBlog/blog/2013/03/09/di-%5B%3F%5D-ben-ying-wen-yuan-ban-java-thread-programming/"/>
    <updated>2013-03-09T23:36:00+08:00</updated>
    <id>http://leep219.github.com/leepBlog/blog/2013/03/09/di-[?]-ben-ying-wen-yuan-ban-java-thread-programming</id>
    <content type="html"><![CDATA[<p>总算是了却了一桩心愿，第一次读完了一本英文原版书，虽然只有430页，但是还是很让人兴奋啊，完成一个心愿的喜悦之情非当事之人不能体会啊！</p>

<!-- more -->


<p>我很佩服这写书之人啊，就一个简单的主题能写出400多页了，虽然中间加了很多代码。这本书也不是之前那书单上列的书，是在找书单上的书时，见别人发帖推荐的，于是就花了2个多星期看完了。在看这本书的时候，同事问我看这本书有什么用？现在的编程工作中根本就不用到thread。我只是单纯的冲着这是本不厚的英文书去的，但是就在快看完这本书的某一天见一人博客推荐了一个网站，专将并发编程的，这让我有中无心插柳，柳成荫的感觉。</p>

<p>java thread programming这本书是比较老的了，本书分为三部分，第一部分是将thread编程的基础，第二部分是使用thread的技巧，以及一些工具类，第三部分是附件。其主要在jdk1.2的版本上运行的，其中还提及了1.0和1.1的版本，讲解了在thread编程中需要注意的问题，并对jdk版本从1.x更新到1.2所作的修改，并讲了原因，还是很透彻的。比如：在新的版本中stop、suspend等方法已经被放弃了，并说明之所以放弃是为了防止dead lock，然后作者给出了解决方案以安全的实现此类功能。如果以前在学校学过，并且有印象的话，那么这本书的知识将是带你温故知新，并没有什么创新性的东西，唯一让人惊喜的应该就是第二部分的一些工具类，比如thread pool和FIFO queue等，很实用，如果进行thread编程的话，这些工具类还是比较有用的。</p>

<p>前两天看那个讲并发编程网站时，里面有提到锁对运行速度的影响，应该是蛮大的，于是其提出了一种无锁的并发方式，这倒是打破了我的认知了，又勾起我的兴趣了！</p>

<p>这是第一本英文书，我记得在网上看别人书，当你看完一本英文书时，你就不怕了，但是我现在还是心里打鼓，在看这书的时候不认识的单词一堆啊，有时候，今天查的生词过个三四天后又不认得了，真是打击人啊，不过看完这一本书之后还是有多认识几个单词的，现在手机里还有五六十个单词不认得呢！慢慢看把，本来想采用透析法来看这本英文书的，但是有些地方实在不查不行啊，为了看完这本书，基本是遇到不认识的就查了，也顾不得遵守那透析法的规矩了，希望下一本书可以采用透析法吧，其实在看书的时候，看顺了有些不认识的单词也能混过去，我貌似混了好几个，当时实在进入状态了，查单词实在太打扰读书的连续性了。</p>

<p>下一本书决定看看thinke in java了，这个传说中的经典一直没看，觉得挺遗憾的，不过1000多页啊，心里没底啊！</p>

<p>2013-3-9 深夜</p>

<p>leep 于北京清河</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013年的第一本书《编码的奥秘》]]></title>
    <link href="http://leep219.github.com/leepBlog/blog/2013/02/06/2013nian-de-di-%5B%3F%5D-ben-shu-%3C%3Cbian-ma-de-ao-mi-%3E%3E/"/>
    <updated>2013-02-06T20:40:00+08:00</updated>
    <id>http://leep219.github.com/leepBlog/blog/2013/02/06/2013nian-de-di-[?]-ben-shu-<<bian-ma-de-ao-mi->></id>
    <content type="html"><![CDATA[<p>缘由天定？古人诚不欺我，犹记得当年（2012年）在豆瓣上列了几本想看的书，惟独没有这本，然而2013年的看的第一本书居然是这本，除了把它推给老天，还能怎么解释呢？而且当初看到这本书的名字时想到的是编写代码的秘技，如果当初知道这本书的大概内容时我估计是不会看的，那样将错过一个经典，历史总是在偶然中发生偏转的，这个会不会又是一
个历史的新起点呢？哈哈，这也太往自己脸上贴金了，害羞鸟！</p>

<!-- more -->


<p>曾经应该看到过一眼这个书名，并且知道它写的是什么，所以当时没看，前两个星期不知道这本书并决定看这本书的机缘已经不可考了，但是在上个星期把它看完了，本来是想上周
末写的，但是由于玩，并且写这Blog的开篇之作，到现在才补上。</p>

<p>编码不是编写代码，而是制定交流码，使人在有限的信息载体中实现无障碍交流。本书从两小孩的夜间交流开始，然后引入摩尔斯电码、布莱叶盲文，接着讲解二进制、各种门，最
后成功组装成一台电脑。这本书的前面看的很快，让人情不自禁的沉迷，佩服作者的知识面，他到底是学啥的？还能懂盲文，前面的摩尔斯电码和盲文的讲解让自己为能拓宽知识面
而开心，后面二进制，尤其是各种门的讲解，让我对作者佩服的五体投地，看完之后最直接的感觉是被打通奇经八脉了！</p>

<p>上学的时候，那微型计算机都不知道学了啥，最终的印象就只有几个方块，然后里面写着中央处理器、寄存器等文字，仅此而已！各种逻辑门的名字大概记得，也背过输出输入的关
系，逻辑运算嘛，必须掌握的，至于这门和计算机是否有联系就不知道了。这本书让我了解各种逻辑门和计算机的关系。强烈推荐，这次看的是中文版，下次有机会一定再看看原版
的，希望这个机会不会太迟！</p>

<p>个人觉得这是一本硬件工程师必看的一本书。</p>

<p>2013-02-06～2013-02-07</p>

<p>leep 夜 火车上、家中</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012个人年终总结]]></title>
    <link href="http://leep219.github.com/leepBlog/blog/2013/02/03/2012ge-ren-nian-zhong-zong-jie/"/>
    <updated>2013-02-03T21:38:00+08:00</updated>
    <id>http://leep219.github.com/leepBlog/blog/2013/02/03/2012ge-ren-nian-zhong-zong-jie</id>
    <content type="html"><![CDATA[<p>2012年已经过去一个月了，一个多月前给公司的总结算是应付交差了，但是一直感觉欠
自己一个总结。</p>

<!-- more -->


<p>先来感慨一下，之前在网上看了别人的总结，说是2012年读了60本书，一开始没什么感觉，
后来这两天一想，一年应该才52个星期吧，顿时惊为天人啊！先展望一下未来，咱得向他看
齐啊，不读60本书，得想办法读30本书啊。</p>

<p>说实话过去的一年实在不知道到底为自己做了什么，依旧没有随家人的愿拐带一个佳人回去
，现在都在想该找什么借口了，过年的时候肯定又要经受狂轰乱炸了，想想都痛苦啊，看来又只有点头的份了，神呐，赐我一个妞吧！</p>

<p>书的话算是看了一些，有印象的是《胡适自传》、《写给大家看的设计书》、《投资答案》、《尽管去做——无压工作的艺术》，貌似没有一个和专业有关的，还真是不务正业呢！和
专业相关的总喜欢在上班的时候看，回家就不想看了，和专业相关的应该看了《javascript编程艺术》、《DOM Scripting》、《The C Programming language中文版》、《精通CSS——高级web标准解决方案》。貌似就这样了，再也想不起来其他的了。</p>

<h3>《胡适自传》</h3>

<p>这是2012年末尾看的，其他的都不记得了，只记得一句“不疑处有疑”，只有这样才能做的学问，破坏性创新或许也是这样吧！</p>

<h3>《写给大家看的设计书》</h3>

<p>之所以看这本书，是觉得自己实在不善于设计，或者说审美有问题，其主要提了几个设计原则，对齐、对比，呃，其他的不记得了！</p>

<h3>《投资答案》</h3>

<p>这书很薄，唯一的成就感就是又看完了一本书，什么投资答案，坑我啊，或者说是不适合中国吧。</p>

<h3>《尽管去做——无压工作的艺术》</h3>

<p>这个书里介绍的方法挺好的，但是没有实践，个人觉得做事情什么方法之类的只是锦上添花，真正需要的是坚持、坚持、再坚持，这才是根本。</p>

<h3>专业书</h3>

<p>CSS是需要看的，因为一些东西不知道，像继承之类的，现在又朦胧了，而javascript和dom的是想看看能不能补补漏，但貌似没有，记得翻看的挺快的，两三天就翻完了，而C呢纯粹是一时心血来潮，只看了这一本，本来想看原版的，没坚持下来，c指针那本书好像就开了一个头，今年得好好划算划算了！</p>

<p>新的一年希望可以拐带一个佳人回家，按照家人的迫切心情，估计就是得结婚了，曾听说不是结婚为目的的恋爱都是耍流氓，看来这辈子和流氓无缘了啊！然后咱也得多多看书，多
多学习啊，英语一定要有所突破啊！2012年的最后一个月重新学习了音标，很有成就感啊！</p>

<p>人太复杂了，对于佳人只能随缘，对于书却需要睁大眼睛仔细挑，只读经典：</p>

<ol>
<li>《编码的奥秘》，列第一是因为这周已经看完了</li>
<li>《java编程思想》，这个应该算是吃饭的家伙啊，这经典的书居然没看过，惭愧！</li>
<li>《Expert One on One J2EE Design and Development》</li>
<li>《Expert One on One J2EE Development without EJB》</li>
<li>《UNIX 编程艺术》</li>
</ol>


<p>先列这些吧，以后再补，希望以后的日子里以一两周的周期来更新blog，监督自己的学习！</p>

<p>2013-2-3 夜</p>

<p>leep 于北京清河</p>
]]></content>
  </entry>
  
</feed>
